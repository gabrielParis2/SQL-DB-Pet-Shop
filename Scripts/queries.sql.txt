Exercicios gpt--

1.1 - select *, count(*) from atendimentos group by id_animal order by count(*);
1.2 -  select id_atendimento, count(*) from atendimentos group by id_funcionario having count(*) > 3;
1.3 - select id_produto, count(*) from vendas group by id_produto having count(*) >3;
1.4 - select tipo, count(*) from animais group by tipo order by count(*) desc;
1.5 - select endereco, count(*) from donos group by endereco having count(*) >=2;

2.1 - alter table animais add column cadastrado_em date;
2.2 - update animais set cadastrado_em = '2024-01-01' where id=1; 
2.3 - alter table donos add foreign key (id_servico_favorito) references servicos (id);
2.4 - update donos set id_servico_favorito = 2 where id = 3;
2.5 - update animais set peso = peso+2 where peso > 10;
2.6 - select donos.nome, animais.tipo, animais.nome from donos inner join animais on animais.id = donos.id order by animais.tipo;
2.7.1 - create table assistencia(
	id int not null auto_increment,
	id_funcionario int,
	id_animal int,
	id_atendimento int,
	primary key (id),
	foreign key (id_funcionario) references funcionarios (id_funcionario),
	foreign key (id_animal) references animais(id),
	foreign key (id_atendimento) references atendimentos(id_atendimento));
2.7.2 - select atendimentos.data_atendimento, assistencia.id, funcionarios.nome from atendimentos
inner join assistencia on atendimentos.id_atendimento = assistencia.id_atendimento
inner join funcionarios on funcionarios.id_funcionario = assistencia.id_funcionario;
2.8 - select vendas.id_produto, funcionarios.nome from vendas
inner join funcionarios on funcionarios.id_funcionario = vendas.id_funcionario order by funcionarios.id_funcionarionome;
2.9 - select  donos.nome, servicos.nome_servico, count(*) from servicos
inner join donos on donos.id = servicos.id_dono group by donos.nome order by count(*) desc; 
 
